package com.epam.mentoring.multithreading.factorial;

import java.math.BigInteger;
import java.time.Instant;
import java.util.concurrent.ForkJoinPool;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class TreeFactorialTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(TreeFactorialTest.class);

    @Test
    void testFactorialForkJoinPool() {
        TreeFactorial treeFactorial = new TreeFactorial(1000);
        ForkJoinPool forkJoinPool = new ForkJoinPool(10);
        BigInteger actual = forkJoinPool.invoke(treeFactorial);

        Assertions.assertThat(actual).hasToString(
                "4023872600770937735437024339230039857193748642107146325437999104299385123986290205920442084" +
                        "86969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627" +
                        "72718873251977950595099527612087497546249704360141827809464649629105639388743788648733711918" +
                        "10458257836478499770124766328898359557354325131853239584630755574091142624174743493475534286" +
                        "46576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586" +
                        "59320192809087829730843139284440328123155861103697680135730421616874760967587134831202547858" +
                        "93207671691324484262361314125087802080002616831510273418279777047846358681701643650241536913" +
                        "98281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836" +
                        "54698404670897560290095053761647584772842188967964624494516076535340819890138544248798495995" +
                        "33191017233555566021394503997362807501378376153071277619268490343526252000158885351473316117" +
                        "02103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862" +
                        "96714667469756291123408243920816015378088989396451826324367161676217916890977991190375403127" +
                        "46222899880051954444142820121873617459926429565817466283029555702990243241531816172104658320" +
                        "36786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327" +
                        "16822645806652676995865268227280707578139185817888965220816434834482599326604336766017699961" +
                        "28318607883861502794659551311565520360939881806121385586003014356945272242063446317974605946" +
                        "82573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559" +
                        "65422874977401141334696271542284586237738753823048386568897646192738381490014076731044664025" +
                        "98994902222217659043399018860185665264850617997023561938970178600408118897299183110211712298" +
                        "45901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649" +
                        "35314397013742853192664987533721894069428143411852015801412334482801505139969429015348307764" +
                        "45690990731524332782882698646027898643211390835062170950025973898635542771967428222487575867" +
                        "65752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461" +
                        "26037902930912088908694202851064018215439945715680594187274899809425474217358240106367740459" +
                        "57417851608292301353580818400969963725242305608559037006242712434169090041536901059339838357" +
                        "77939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000" +
                        "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }

    @ParameterizedTest
    @ValueSource(longs = { 1000, 10000, 100000, 1000000 })
    void testFactorialTimeComparison(long number) {
        TreeFactorial treeFJPFactorial = new TreeFactorial(number);
        ForkJoinPool forkJoinPool = new ForkJoinPool(10);

        Instant startFJPProcessing = Instant.now();
        BigInteger fjpResult = forkJoinPool.invoke(treeFJPFactorial);
        Instant endFJPProcessing = Instant.now();

        TreeFactorial treeSeqFactorial = new TreeFactorial(number);
        Instant startSequentialProcessing = Instant.now();
        BigInteger sequenceResult = treeSeqFactorial.sequenceApproach();
        Instant endSequentialProcessing = Instant.now();

        LOGGER.info("FJP Tree Factorial calculation time: {}, Seq Tree Factorial calculation time: {}",
                endFJPProcessing.toEpochMilli() - startFJPProcessing.toEpochMilli(),
                endSequentialProcessing.toEpochMilli() - startSequentialProcessing.toEpochMilli());
        // for 10 000: FJP takes 57ms | Sequence takes 13ms
        // for 100 000: FJP takes 441ms | Sequence takes 383ms
        // for 1 000 000: FJP takes 2773ms | Sequence takes 3767ms
    }

}
